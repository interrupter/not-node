import { MODULE_NAME } from "../../const.js";
import Validators from "../common/validators.js";
import { Frame, notCommon } from "not-bulma";
import CRUDActionList from "not-bulma/src/frame/crud/actions/list";

const { notCRUD } = Frame;

const MODEL_NAME = "<%- ModelName %>";
const modelName = notCommon.lowerFirstLetter(MODEL_NAME);

const LABELS = {
    plural: `${MODULE_NAME}:${modelName}_label_plural`,
    single: `${MODULE_NAME}:${modelName}_label_single`,
};

Object.freeze(LABELS);

class nc<%- ModelName %>Common extends notCRUD {
    static get MODULE_NAME(){
        return MODULE_NAME;
    }

    static get MODEL_NAME(){
        return MODEL_NAME;
    }

    static get LABELS(){
        return LABELS;
    }

    constructor(app, params) {
        super(app, `${MODULE_NAME}.${MODEL_NAME}`);
        this.setModuleName(MODULE_NAME);
        this.setModelName(MODEL_NAME);
        this.setOptions("names", LABELS);
        this.setValidators(Validators);
        this.setOptions("params", params);
        this.setOptions("list", {
            interface: {
                combined: true,
                factory: this.make.<%- modelName %>,
            },
            endless: false,
            preload: {},
            sorter: {
                id: -1,
            },
            showSearch: true,
            showSelect: false,
            idField: "_id",
            fields: [
                <% if (increment) { %>
                {
                    path: ":<%- modelName %>ID",
                    title: "ID",
                    searchable: true,
                    sortable: true,
                },
                <% } %>
                <% for (let fieldName of fields){ %>
                {
                    path: ":<%- fieldName[0] %>",
                    title: `${MODULE_NAME}:<%- `${modelName}_field_${fieldName[0]}_label` %>`,
                    searchable: true,
                    sortable: true,
                },
                <% } %>
                {
                    path: ":_id",
                    title: "Действия",
                    type: "button",
                    preprocessor: (value) => CRUDActionList.createActionsButtons(this, value),
                },
            ],
        });

        this.start();
        return this;
    }

    createDefault() {
        let newRecord = this.getModel({
            <% for (let fieldName of fields){ %><%- fieldName[0] %>: undefined,
            <% } %>
        });
        return newRecord;
    }

    static getMenu(){
        return notCRUD.getCommonMenu(nc<%- ModelName %>Common);
    }

}

export default nc<%- ModelName %>Common;


